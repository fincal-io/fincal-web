/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tags */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tag_entity"][];
                    };
                };
            };
        };
        put?: never;
        /** Create tag */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["tag_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tag_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tags/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tag */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tagId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tag_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Remove tag */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tagId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update tag */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tagId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["tag_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["tag_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/currencies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all currencies */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["currency_entity"][];
                    };
                };
            };
        };
        put?: never;
        /** Create currency */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["currency_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["currency_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/currencies/{currencyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove currency */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    currencyId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update currency */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    currencyId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["currency_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["currency_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/entities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all entities
         * @description Get all entities
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["entity_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create entity
         * @description Create entity
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["entity_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["entity_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/entities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get entity by id
         * @description Get entity by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["entity_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete entity
         * @description Delete entity
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update entity
         * @description Update entity
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["entity_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["entity_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/exchanges/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all exchanges
         * @description Get all exchanges
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["exchange_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add exchange
         * @description Add exchange
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["exchange_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["exchange_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/exchanges/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete exchange
         * @description Delete exchange
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the exchange */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Whether the operation was successful */
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update exchange
         * @description Update exchange
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the exchange */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["exchange_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["exchange_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all categories
         * @description Get all categories
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["category_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create category
         * @description Create category
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["category_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["category_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get category by id
         * @description Get category by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["category_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete category
         * @description Delete category
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update category
         * @description Update category
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["category_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["category_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/funds/{exchangeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all funds for an exchange
         * @description Get all funds for an exchange
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the exchange */
                    exchangeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["fund_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add fund to exchange
         * @description Add fund to exchange
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the exchange */
                    exchangeId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["fund_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["fund_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/funds/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete fund
         * @description Delete fund
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the fund */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Whether the operation was successful */
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update fund
         * @description Update fund
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the fund */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["fund_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["fund_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/budgets{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get budget template
         * @description Get budget template by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the budget template */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["budget_template_entity"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/budgets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create budget template
         * @description Create budget template and activate it for current workspace
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["budget_template_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["budget_template_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get accounts
         * @description Get all accounts
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["account_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create account
         * @description Create account
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["account_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["account_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account
         * @description Get account by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the account */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["account_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete account
         * @description Delete account
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the account */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update account
         * @description Update account
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the account */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["account_update"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["account_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/subscriptions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get subscriptions
         * @description Get all subscriptions
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["subscription_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create subscription
         * @description Create subscription
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["subscription_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["subscription_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/subscriptions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get subscription by id
         * @description Get subscription by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the subscription */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["subscription_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete subscription
         * @description Delete subscription
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the subscription */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update subscription
         * @description Update subscription
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the subscription */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["subscription_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["subscription_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/incomes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get incomes
         * @description Get all incomes
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["income_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create income
         * @description Create income
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["income_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["income_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/incomes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get income by id
         * @description Get income by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the income */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["income_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete income
         * @description Delete income
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the income */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update income
         * @description Update income
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the income */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["income_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["income_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/goals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get goals
         * @description Get all goals
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["goal_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create goal
         * @description Create goal
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["goal_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["goal_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/goals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get goal by id
         * @description Get goal by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the goal */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["goal_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete goal
         * @description Delete goal
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the goal */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update goal
         * @description Update goal
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the goal */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["goal_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["goal_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/goal-allocations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get goal allocations
         * @description Get all goal allocations
         */
        get: {
            parameters: {
                query?: {
                    /** @description The id of the goal */
                    goalId?: string;
                    /** @description The id of the account */
                    accountId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["goal_allocation_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create goal allocation
         * @description Create goal allocation
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["goal_allocation_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["goal_allocation_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/goal-allocations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get goal allocation by id
         * @description Get goal allocation by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the goal allocation */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["goal_allocation_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete goal allocation
         * @description Delete goal allocation
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the goal allocation */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update goal allocation
         * @description Update goal allocation
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the goal allocation */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["goal_allocation_update"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["goal_allocation_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/trading-accounts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get trading accounts
         * @description Get all trading accounts
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["trading_account_entity"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/trading-accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get trading account by id
         * @description Get trading account by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the trading account */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["trading_account_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete trading account
         * @description Delete trading account
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the trading account */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update trading account
         * @description Update trading account
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the trading account */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["trading_account_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["trading_account_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/trading-accounts/{exchangeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create trading account
         * @description Create trading account
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    exchangeId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["trading_account_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["trading_account_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/assets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get assets
         * @description Get all assets
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["asset_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create asset
         * @description Create asset
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["asset_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["asset_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/assets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get asset by id
         * @description Get asset by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the asset */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["asset_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete asset
         * @description Delete asset
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the asset */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update asset
         * @description Update asset
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the asset */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["asset_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["asset_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/liabilities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get liability
         * @description Get all liability
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["liability_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create liability
         * @description Create liability
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["liability_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["liability_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/liabilities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get liability by id
         * @description Get liability by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the liability */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["liability_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete liability
         * @description Delete liability
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the liability */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update liability
         * @description Update liability
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the liability */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["liability_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["liability_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/auth/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign in with Google
         * @description Authenticate with Google token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["auth_token_entity"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description JWT token */
                            token?: string;
                            /** @description Error message */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/workspace-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get auth token for workspace
         * @description Get auth token for workspace
         */
        get: {
            parameters: {
                query?: {
                    /** @description Workspace id */
                    workspaceId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description JWT token */
                            token?: string;
                            /** @description Error message */
                            error?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users in a workspace
         * @description Get all users in a workspace
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user_entity"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update user
         * @description Update user
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["update_user_entity"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/users/self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get self
         * @description Get self
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workspaces/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all workspaces
         * @description Get all workspaces user has access to
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workspace_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create workspace
         * @description Create workspace
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["workspace_create_entity"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workspace_entity"];
                    };
                };
            };
        };
        /**
         * Delete workspace
         * @description Delete workspace
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Whether the operation was successful */
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update workspace
         * @description Update workspace
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["workspace_create_entity"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workspace_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/v1/workspaces/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get workspace by id
         * @description Get workspace by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the workspace */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["workspace_entity"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/access/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all user access for a workspace
         * @description Get all user access for a workspace
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["user_access_entity"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add user to workspace
         * @description Add user to workspace
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Email of the user */
                        email?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Whether the operation was successful */
                            success?: boolean;
                            /** @description Error message */
                            error?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/access/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove user from workspace
         * @description Remove user from workspace
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Whether the operation was successful */
                            success?: boolean;
                            /** @description Error message */
                            error?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/holdings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get holdings
         * @description Get all holdings
         */
        get: {
            parameters: {
                query?: {
                    /** @description The id of the trading account */
                    tradingAccountId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["holding_entity"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/holdings/{tradingAccountId}/{fundId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create holding
         * @description Create holding
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the trading account */
                    tradingAccountId: string;
                    /** @description The id of the fund */
                    fundId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["holding_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["holding_entity"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/holdings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete holding
         * @description Delete holding
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the holding */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update holding
         * @description Update holding
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The id of the holding */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["holding_insert"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["holding_entity"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "id": "38c4b9f0-a4e7-4a0f-b1a9-e0b0e9a1b2c3",
         *       "name": "Home Expense",
         *       "color": "#ffffff",
         *       "createdAt": "2022-01-01T00:00:00.000Z",
         *       "updatedAt": "2022-01-01T00:00:00.000Z"
         *     } */
        tag_entity: {
            /** @description Tag id */
            id?: string;
            /** @description Tag name */
            name?: string;
            /** @description Tag color */
            color?: string;
            /** @description Tag creation date */
            createdAt?: string;
            /** @description Tag update date */
            updatedAt?: string;
        };
        /** @example {
         *       "name": "Home Expense",
         *       "color": "#ffffff"
         *     } */
        tag_insert: {
            /** @description Tag name */
            name: string;
            /** @description Tag color */
            color: string;
        };
        /** @example {
         *       "name": "US Dollar",
         *       "code": "USD",
         *       "locale": "en-US",
         *       "scale": 2,
         *       "conversionFactor": 1
         *     } */
        currency_entity: {
            /** @description Currency name */
            name?: string;
            /** @description Currency code */
            code?: string;
            /** @description Currency locale */
            locale?: string;
            /** @description Number of significant digits after the decimal point */
            scale?: number;
            /** @description Conversion factor to convert from this currency to another, with respect to USD */
            conversionFactor?: number;
        };
        /** @example {
         *       "name": "US Dollar",
         *       "code": "USD",
         *       "locale": "en-US",
         *       "scale": 2,
         *       "conversionFactor": 1
         *     } */
        currency_insert: {
            /** @description Currency name */
            name?: string;
            /** @description Currency code */
            code?: string;
            /** @description Currency locale */
            locale?: string;
            /** @description Number of significant digits after the decimal point */
            scale?: number;
            /** @description Conversion factor to convert from this currency to another, with respect to USD */
            conversionFactor?: number;
        };
        /** @example {
         *       "id": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2",
         *       "name": "Netflix",
         *       "icon": "asset::212c1f2a-d5c0-4d6f-b0f7-e8e3c3b9c2c1"
         *     } */
        entity_entity: {
            /** @description The id of the entity */
            id?: string;
            /** @description The name of the entity */
            name?: string;
            /** @description The icon of the entity */
            icon?: string;
        };
        /** @example {
         *       "name": "Netflix",
         *       "icon": "char::A"
         *     } */
        entity_insert: {
            /** @description The name of the entity */
            name: string;
            /** @description The icon of the entity */
            icon: string;
        };
        /** @example {
         *       "id": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2",
         *       "name": "Bombay Stock Exchange",
         *       "code": "BSE",
         *       "currencyId": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2"
         *     } */
        exchange_entity: {
            /** @description The id of the exchange */
            id?: string;
            /** @description The name of the exchange */
            name?: string;
            /** @description The code of the exchange */
            code?: string;
            /** @description The currency id of the exchange */
            currencyId?: string;
        };
        /** @example {
         *       "name": "Bombay Stock Exchange",
         *       "code": "BSE",
         *       "currencyId": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2"
         *     } */
        exchange_insert: {
            /** @description The name of the exchange */
            name: string;
            /** @description The code of the exchange */
            code: string;
            /** @description The currency id of the exchange */
            currencyId?: string;
        };
        /** @example {
         *       "id": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2",
         *       "name": "Fashion",
         *       "icon": "https://example.com/icon.png"
         *     } */
        category_entity: {
            /** @description The id of the category */
            id?: string;
            /** @description The name of the category */
            name?: string;
            /** @description The icon of the category */
            icon?: string;
        };
        /** @example {
         *       "name": "Fashion",
         *       "icon": "char::👗"
         *     } */
        category_insert: {
            /** @description The name of the category */
            name: string;
            /** @description The icon of the category */
            icon?: string;
        };
        /** @example {
         *       "id": "3b1c4e6e-b7d8-4b5a-a8e2-f8f6f0a4a2d2",
         *       "name": "Fund 1",
         *       "symbol": "FUND1",
         *       "exchangeId": "41c4e6e-b7d8-4b5a-a8e2-f8f6f0a4a2d2",
         *       "type": "Fund",
         *       "sector": "Sector 1",
         *       "marketSize": 1000,
         *       "unitPrice": 100
         *     } */
        fund_entity: {
            /** @description The unique identifier for the fund */
            id?: string;
            /** @description The name of the fund */
            name?: string;
            /** @description The symbol of the fund */
            symbol?: string;
            /** @description The exchange id of the fund */
            exchangeId?: string;
            /** @description The type of the fund */
            type?: string;
            /** @description The sector of the fund */
            sector?: string;
            /** @description The market size of the fund */
            marketSize?: number;
            /** @description The unit price of the fund */
            unitPrice?: number;
        };
        /** @example {
         *       "name": "Fund 1",
         *       "symbol": "FUND1",
         *       "type": "Fund",
         *       "sector": "Sector 1",
         *       "marketSize": 1000,
         *       "unitPrice": 100
         *     } */
        fund_insert: {
            /** @description The name of the fund */
            name: string;
            /** @description The symbol of the fund */
            symbol: string;
            /** @description The type of the fund */
            type: string;
            /** @description The sector of the fund */
            sector: string;
            /** @description The market size of the fund */
            marketSize: number;
            /** @description The unit price of the fund */
            unitPrice: number;
        };
        /** @example {
         *       "id": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2",
         *       "groups": [
         *         {
         *           "name": "Income",
         *           "categories": [
         *             {
         *               "id": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2",
         *               "icon": "https://example.com/icon.png",
         *               "name": "Salary",
         *               "amount": 1000,
         *               "categoryId": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2"
         *             }
         *           ]
         *         }
         *       ]
         *     } */
        budget_template_entity: {
            /** @description The id of the budget template */
            id?: string;
            /** @description The groups of the budget template */
            groups?: {
                /** @description The id of the budget group */
                id?: string;
                /** @description The name of the budget group */
                name?: string;
                /** @description The categories of the budget group */
                categories?: {
                    /** @description The id of the budget category */
                    id: string;
                    /** @description The name of the budget category */
                    name: string;
                    /** @description The category id of the budget category */
                    categoryId?: string;
                    /** @description The icon of the budget category */
                    icon: string;
                    /** @description The amount of the budget category */
                    amount: number;
                }[];
            }[];
        };
        /** @example {
         *       "name": "Income",
         *       "groups": [
         *         {
         *           "name": "Salary",
         *           "id": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2",
         *           "categories": [
         *             {
         *               "id": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2",
         *               "name": "Salary",
         *               "categoryId": "1b5e1d6e-f5b8-4f3d-a7d1-d8c3b6f4c1c2",
         *               "icon": "https://example.com/icon.png",
         *               "amount": 1000
         *             }
         *           ]
         *         }
         *       ]
         *     } */
        budget_template_insert: {
            /** @description The groups of the budget template */
            groups: {
                /** @description The name of the budget group */
                name: string;
                /** @description The categories of the budget group */
                categories: {
                    /** @description The name of the budget category */
                    name: string;
                    /** @description The category id of the budget category */
                    categoryId: string;
                    /** @description The icon of the budget category */
                    icon?: string;
                    /** @description The amount of the budget category */
                    amount: number;
                }[];
            }[];
        };
        /** @example {
         *       "id": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "name": "Checking",
         *       "accountNumber": "1234567890",
         *       "icon": "mdi-bank",
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "accountType": "bank",
         *       "balance": 1000
         *     } */
        account_entity: {
            /** @description The id of the account */
            id?: string;
            /** @description The name of the account */
            name?: string;
            /** @description The account number of the account */
            accountNumber?: string;
            /** @description The icon of the account */
            icon?: string;
            /** @description The currency of the account */
            currencyId?: string;
            /** @description The type of the account */
            accountType?: string;
            /** @description The balance of the account */
            balance?: number;
            /** @description The id of the user */
            userId?: string;
        };
        /** @example {
         *       "name": "Checking",
         *       "accountNumber": "1234567890",
         *       "icon": "mdi-bank",
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "accountType": "bank"
         *     } */
        account_insert: {
            /** @description The name of the account */
            name: string;
            /** @description The account number of the account */
            accountNumber?: string;
            /** @description The icon of the account */
            icon?: string;
            /** @description The currency of the account */
            currencyId: string;
            /** @description The type of the account */
            accountType?: string;
            /** @description The id of the user */
            userId: string;
        };
        /** @example {
         *       "name": "Checking",
         *       "accountNumber": "1234567890",
         *       "icon": "mdi-bank"
         *     } */
        account_update: {
            /** @description The name of the account */
            name?: string;
            /** @description The account number of the account */
            accountNumber?: string;
            /** @description The icon of the account */
            icon?: string;
        };
        /** @example {
         *       "id": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "name": "Subscription",
         *       "entityId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "frequency": "monthly",
         *       "amount": 1000,
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "userId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9"
         *     } */
        subscription_entity: {
            /** @description The id of the subscription */
            id?: string;
            /** @description The name of the subscription */
            name?: string;
            /** @description The id of the entity */
            entityId?: string;
            /** @description The frequency of the subscription */
            frequency?: string;
            /** @description The amount of the subscription */
            amount?: number;
            /** @description The currency of the subscription */
            currencyId?: string;
            /** @description The id of the user */
            userId?: string;
        };
        /** @example {
         *       "name": "Subscription",
         *       "entityId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "frequency": "monthly",
         *       "amount": 1000,
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "userId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9"
         *     } */
        subscription_insert: {
            /** @description The name of the subscription */
            name: string;
            /** @description The id of the entity */
            entityId: string;
            /** @description The frequency of the subscription */
            frequency: string;
            /** @description The amount of the subscription */
            amount: number;
            /** @description The currency of the subscription */
            currencyId: string;
            /** @description The id of the user */
            userId: string;
        };
        /** @example {
         *       "id": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "name": "income",
         *       "entityId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "frequency": "monthly",
         *       "amount": 1000,
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "userId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9"
         *     } */
        income_entity: {
            /** @description The id of the income */
            id?: string;
            /** @description The name of the income */
            name?: string;
            /** @description The id of the entity */
            entityId?: string;
            /** @description The frequency of the income */
            frequency?: string;
            /** @description The amount of the income */
            amount?: number;
            /** @description The currency of the income */
            currencyId?: string;
            /** @description The id of the user */
            userId?: string;
        };
        /** @example {
         *       "name": "income",
         *       "entityId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "frequency": "monthly",
         *       "amount": 1000,
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "userId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9"
         *     } */
        income_insert: {
            /** @description The name of the income */
            name: string;
            /** @description The id of the entity */
            entityId: string;
            /** @description The frequency of the income */
            frequency: string;
            /** @description The amount of the income */
            amount: number;
            /** @description The currency of the income */
            currencyId: string;
            /** @description The id of the user */
            userId: string;
        };
        /** @example {
         *       "id": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "name": "goal",
         *       "image": "https://picsum.photos/200/300",
         *       "amount": 1000,
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "userId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "status": "active",
         *       "achievedAt": "2022-01-01T00:00:00.000Z",
         *       "createdAt": "2022-01-01T00:00:00.000Z"
         *     } */
        goal_entity: {
            /** @description The id of the goal */
            id?: string;
            /** @description The name of the goal */
            name?: string;
            /** @description The image of the goal */
            image?: string;
            /** @description The amount of the goal */
            amount?: number;
            /** @description The currency of the goal */
            currencyId?: string;
            /** @description The id of the user */
            userId?: string;
            /** @description The status of the goal */
            status?: string;
            /** @description The achieved at of the goal */
            achievedAt?: string;
            /** @description The created at of the goal */
            createdAt?: string;
        };
        /** @example {
         *       "name": "goal",
         *       "image": "https://picsum.photos/200/300",
         *       "amount": 1000,
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "userId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9"
         *     } */
        goal_insert: {
            /** @description The name of the goal */
            name: string;
            /** @description The image of the goal */
            image: string;
            /** @description The amount of the goal */
            amount: number;
            /** @description The currency of the goal */
            currencyId: string;
            /** @description The id of the user */
            userId?: string;
        };
        /** @example {
         *       "id": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "goalId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "accountType": "bank",
         *       "accountId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "quantity": 1000
         *     } */
        goal_allocation_entity: {
            /** @description The id of the goal allocation */
            id?: string;
            /** @description The id of the goal */
            goalId?: string;
            /** @description The type of the account */
            accountType?: string;
            /** @description The id of the account */
            accountId?: string;
            /** @description The quantity of the account */
            quantity?: number;
        };
        /** @example {
         *       "goalId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "accountType": "bank",
         *       "accountId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "quantity": 1000
         *     } */
        goal_allocation_insert: {
            /** @description The id of the goal */
            goalId: string;
            /** @description The type of the account */
            accountType: string;
            /** @description The id of the account */
            accountId: string;
            /** @description The quantity of the account */
            quantity: number;
        };
        /** @example {
         *       "quantity": 1000
         *     } */
        goal_allocation_update: {
            /** @description The quantity of the account */
            quantity?: number;
        };
        /** @example {
         *       "id": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "name": "Trading Account",
         *       "icon": "mdi-bank",
         *       "accountNumber": "1234567890",
         *       "exchangeId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9"
         *     } */
        trading_account_entity: {
            /** @description The id of the trading account */
            id?: string;
            /** @description The name of the trading account */
            name?: string;
            /** @description The icon of the trading account */
            icon?: string;
            /** @description The account number of the trading account */
            accountNumber?: string;
            /** @description The id of the exchange */
            exchangeId?: string;
            /** @description The id of the user */
            userId?: string;
        };
        /** @example {
         *       "name": "Trading Account",
         *       "icon": "mdi-bank",
         *       "accountNumber": "1234567890"
         *     } */
        trading_account_insert: {
            /** @description The name of the trading account */
            name: string;
            /** @description The icon of the trading account */
            icon?: string;
            /** @description The account number of the trading account */
            accountNumber?: string;
            /** @description The id of the user */
            userId?: string;
        };
        /** @example {
         *       "id": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "name": "Asset",
         *       "icon": "mdi-bank",
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "userId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "amount": 1000,
         *       "metadata": {
         *         "foo": "bar"
         *       }
         *     } */
        asset_entity: {
            /** @description The id of the asset */
            id?: string;
            /** @description The name of the asset */
            name?: string;
            /** @description The icon of the asset */
            icon?: string;
            /** @description The currency of the asset */
            currencyId?: string;
            /** @description The amount of the asset */
            amount?: number;
            /** @description The id of the user */
            userId?: string;
            /** @description The metadata of the asset */
            metadata?: Record<string, never>;
        };
        /** @example {
         *       "name": "Asset",
         *       "icon": "mdi-bank",
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "userId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "amount": 1000
         *     } */
        asset_insert: {
            /** @description The name of the asset */
            name: string;
            /** @description The icon of the asset */
            icon?: string;
            /** @description The currency of the asset */
            currencyId: string;
            /** @description The id of the user */
            userId?: string;
            /** @description The amount of the asset */
            amount: number;
        };
        /** @example {
         *       "id": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "name": "Liability",
         *       "icon": "mdi-bank",
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "userId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "amount": 1000,
         *       "metadata": {
         *         "foo": "bar"
         *       }
         *     } */
        liability_entity: {
            /** @description The id of the liability */
            id?: string;
            /** @description The name of the liability */
            name?: string;
            /** @description The icon of the liability */
            icon?: string;
            /** @description The currency of the liability */
            currencyId?: string;
            /** @description The amount of the liability */
            amount?: number;
            /** @description The id of the user */
            userId?: string;
            /** @description The metadata of the liability */
            metadata?: Record<string, never>;
        };
        /** @example {
         *       "name": "Liability",
         *       "icon": "mdi-bank",
         *       "currencyId": "5f5d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "userId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "amount": 1000
         *     } */
        liability_insert: {
            /** @description The name of the liability */
            name: string;
            /** @description The icon of the liability */
            icon?: string;
            /** @description The currency of the liability */
            currencyId: string;
            /** @description The id of the user */
            userId?: string;
            /** @description The amount of the liability */
            amount: number;
        };
        auth_token_entity: {
            /** @description Google idToken to authenticate */
            token: string;
        };
        /** @example {
         *       "name": "John Doe",
         *       "icon": "https://example.com/icon.png"
         *     } */
        update_user_entity: {
            /** @description Name of the user */
            name?: string;
            /** @description URL of the user's icon */
            icon?: string;
        };
        /** @example {
         *       "id": "12c3d396-8a6e-4f59-87eb-5fcbd7fb0069",
         *       "name": "John Doe",
         *       "icon": "https://example.com/icon.png"
         *     } */
        user_entity: {
            /** @description ID of the user */
            id?: string;
            /** @description Name of the user */
            name?: string;
            /** @description URL of the user's icon */
            icon?: string;
        };
        /**
         * workspace_entity
         * @example {
         *       "id": "12c3d396-8a6e-4f59-87eb-5fcbd7fb0069",
         *       "name": "My Workspace",
         *       "defaultCurrencyId": "USD",
         *       "ownerId": "12c3d396-8a6e-4f59-87eb-5fcbd7fb0069",
         *       "activeBudgetTemplateId": "12c3d396-8a6e-4f59-87eb-5fcbd7fb0069"
         *     }
         */
        workspace_entity: {
            /** @description ID of the workspace */
            id?: string;
            /** @description Name of the workspace */
            name?: string;
            /** @description ID of the default currency */
            defaultCurrencyId?: string;
            /** @description ID of the owner */
            ownerId?: string;
            /** @description ID of the active budget template */
            activeBudgetTemplateId?: string;
            /** @description Array of enabled currency ids */
            enabledCurrencyIds?: string[];
        };
        /** @example {
         *       "name": "My Workspace"
         *     } */
        workspace_create_entity: {
            /** @description Name of the workspace */
            name: string;
            /** @description ID of the default currency */
            defaultCurrencyId?: string;
            /** @description Array of enabled currency ids */
            enabledCurrencyIds?: string[];
        };
        /** @example {
         *       "id": "12c3d396-8a6e-4f59-87eb-5fcbd7fb0069",
         *       "userId": "12c3d396-8a6e-4f59-87eb-5fcbd7fb0069",
         *       "workspaceId": "12c3d396-8a6e-4f59-87eb-5fcbd7fb0069"
         *     } */
        user_access_entity: {
            /** @description ID of the user access */
            id?: string;
            /** @description ID of the user */
            userId?: string;
            /** @description ID of the workspace */
            workspaceId?: string;
        };
        /** @example {
         *       "id": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "fundId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "tradingAccountId": "7d9d1e1c-a3f7-4e4d-b8e7-f2f3a9f9e9c9",
         *       "quantity": 1000
         *     } */
        holding_entity: {
            /** @description The id of the holding */
            id?: string;
            /** @description The id of the fund */
            fundId?: string;
            /** @description The id of the trading account */
            tradingAccountId?: string;
            /** @description The quantity of the holding */
            quantity?: number;
            fund?: {
                /** @description The unique identifier for the fund */
                id?: string;
                /** @description The name of the fund */
                name?: string;
                /** @description The symbol of the fund */
                symbol?: string;
                /** @description The type of the fund */
                type?: string;
                /** @description The unit price of the fund */
                unitPrice?: number;
            };
            tradingAccount?: {
                /** @description The id of the trading account */
                id?: string;
                /** @description The id of the user */
                userId?: string;
            };
            exchange?: {
                /** @description The id of the exchange */
                id?: string;
                /** @description The name of the exchange */
                name?: string;
                /** @description The code of the exchange */
                code?: string;
                /** @description The currency id of the exchange */
                currencyId?: string;
            };
        };
        /** @example {
         *       "quantity": 1000
         *     } */
        holding_insert: {
            /** @description The quantity of the holding */
            quantity: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
